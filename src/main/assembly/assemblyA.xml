<assembly xmlns="http://maven.apache.org/ASSEMBLY/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/ASSEMBLY/2.0.0 http://maven.apache.org/xsd/assembly-2.0.0.xsd">
    <!--一个装配集合ID，会拼在${project.build.finalName}后面做为包的全名-->
    <id>appServerA</id>
    <!--装配打包格式-->
    <formats>
        <format>tar.gz</format>
        <format>dir</format>
    </formats>
    <!--指定要包含在程序集中的共享组件xml文件位置,当找到多个componentDescriptors时，它们的内容被合并-->
    <!--<componentDescriptors>-->
        <!--<componentDescriptor>src/main/assembly/assembly_component.xml</componentDescriptor>-->
    <!--</componentDescriptors>-->
    <!--是否包含根目录，默认为true -->
    <includeBaseDirectory>true</includeBaseDirectory>
    <!--设置生成的程序集归档的基本目录，默认拿${project.build.finalName}代替-->
    <baseDirectory>/</baseDirectory>

    <!--指定包含哪些文件组-->
    <fileSets>
        <fileSet>
            <!--设置模块目录的绝对或相对位置-->
            <directory>src/main/assembly/bin</directory>
            <!--设置输出目录相对于程序集根目录的根目录-->
            <outputDirectory>bin</outputDirectory>
            <!--与UNIX权限类似，设置所包含文件的文件模式-->
            <fileMode>0755</fileMode>
        </fileSet>
        <fileSet>
            <directory>src/main/resources</directory>
            <outputDirectory>conf</outputDirectory>
            <fileMode>0644</fileMode>
        </fileSet>
        <fileSet>
            <directory>target/extra-conf</directory>
            <outputDirectory>conf/META-INF/spring</outputDirectory>
            <!--定义一组要包含的文件和目录-->
            <includes>
                <include>ctx-*.xml</include>
            </includes>
            <fileMode>0644</fileMode>
        </fileSet>
    </fileSets>
    <!--指定在程序集中包含哪些单个文件-->
    <files>

        <!--指定过滤相应的文件-->
        <file>
            <source>README.md</source>
            <outputDirectory>/</outputDirectory>
            <!--是否被过滤掉-->
            <filtered>true</filtered>
        </file>
        <file>
            <!--原文件-->
            <source>Dockerfile</source>
            <!--输出文件名-->
            <destName>Dockerfile</destName>
            <!--输出目录-->
            <outputDirectory>/</outputDirectory>
            <!--设置输出后的文件权限-->
            <fileMode>0644</fileMode>
        </file>
        <file>
            <source>docker-compose.yml</source>
            <destName>docker-compose.yml</destName>
            <outputDirectory>/</outputDirectory>
            <fileMode>0644</fileMode>
        </file>
    </files>
    <dependencySets>
        <!--依赖关系集允许在程序集中包含和排除项目依赖关系-->
        <dependencySet>
            <!--设置输出目录相对于程序集根目录的根目录-->
            <outputDirectory>lib</outputDirectory>
            <!--定义一组依赖项工件坐标以排除,工件坐标可以以简单的groupId：artifactId形式给出，或者可以以groupId：artifactId：type [：classifier]：version的形式完全限定。另外，可以使用通配符，如*：maven- *-->
            <!--<excludes>-->
                <!--<exclude>com.ibingbo.boot:demo-conf</exclude>-->
            <!--</excludes>-->
            <!--<includes>-->
                <!--<include>com.ibingbo.boot:appServerA</include>-->
            <!--</includes>-->
        </dependencySet>
    </dependencySets>
    <!--定义要包含在程序集中的Maven仓库,包含元信息sha1和md5校验和，会在包中生成一个maven2目录-->
    <!--<repositories>-->
        <!--<repository>-->
            <!--<includeMetadata>false</includeMetadata>-->
            <!--<outputDirectory>maven2</outputDirectory>-->
        <!--</repository>-->
    <!--</repositories>-->
</assembly>